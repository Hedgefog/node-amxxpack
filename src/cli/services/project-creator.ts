import path from 'path';
import fs from 'fs';
import mkdirp from 'mkdirp';
import { get } from 'lodash';
import { exec } from 'child_process';
// import execa from 'execa';

import config from '../../config';
import { IProjectOptions } from '../types';
import { IProjectConfig } from '../../types';
import ProjectConfig from '../../project-config';
import logger from '../../logger/logger';

class ProjectCreator {
  public projectDir: string = null;
  public projectConfig: IProjectConfig = null;

  constructor(
    public options: IProjectOptions = null
  ) {
    if (options) {
      this.projectDir = path.join(process.cwd(), options.name);
    }

    this.projectConfig = ProjectConfig.defaults;
  }

  async createPackage() {
    const packagePath = path.join(this.projectDir, 'package.json');

    const packageData = {
      name: this.options.name,
      version: get(this.options, 'version', '0.1.0'),
      author: get(this.options, 'author', 'AMXXPack'),
      description: get(this.options, 'description', 'This project was generated by AMXXPack CLI'),
      scripts: {
        build: 'amxxpack buildjs',
        watch: 'amxxpack build --watch',
        postinstall: 'amxxpack install'
      }
    };

    await fs.promises.writeFile(packagePath, JSON.stringify(packageData, null, 2));
  }

  async createConfig() {
    await mkdirp(this.projectDir);
    const configPath = path.join(this.projectDir, config.projectConfig);
    await fs.promises.writeFile(configPath, JSON.stringify(this.projectConfig, null, 2));
  }

  async createFolders() {
    await mkdirp(path.join(this.projectDir, this.projectConfig.input.assets));
    await mkdirp(path.join(this.projectDir, this.projectConfig.input.include));
    await mkdirp(path.join(this.projectDir, this.projectConfig.input.scripts));
  }

  async installDependencies() {
    exec('npm install amxxpack --save-dev', {
      cwd: this.projectDir
    });
  }

  async createProject(): Promise<void> {
    if (fs.existsSync(this.projectDir)) {
      logger.error('Project', this.options.name, 'is already exists!');
      return;
    }

    await this.createConfig();
    await this.createFolders();
    await this.createPackage();
    await this.installDependencies();
  }
}

export default ProjectCreator;
